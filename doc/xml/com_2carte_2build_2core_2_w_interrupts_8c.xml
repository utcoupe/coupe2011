<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="com_2carte_2build_2core_2_w_interrupts_8c" kind="file">
    <compoundname>WInterrupts.c</compoundname>
    <includes local="no">inttypes.h</includes>
    <includes local="no">avr/io.h</includes>
    <includes local="no">avr/interrupt.h</includes>
    <includes local="no">avr/pgmspace.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="com_2carte_2build_2core_2_w_interrupts_8c" local="yes">WConstants.h</includes>
    <includes refid="motor_control_2build_2core_2wiring_8h" local="yes">wiring.h</includes>
    <includes refid="motor_control_2build_2core_2wiring__private_8h" local="yes">wiring_private.h</includes>
    <includedby refid="com_2carte_2build_2core_2_w_interrupts_8c" local="yes">com/carte/build/core/WInterrupts.c</includedby>
    <incdepgraph>
      <node id="1556">
        <label>stdarg.h</label>
      </node>
      <node id="1548">
        <label>avr/interrupt.h</label>
      </node>
      <node id="1552">
        <label>stdlib.h</label>
      </node>
      <node id="1545">
        <label>com/carte/build/core/WInterrupts.c</label>
        <link refid="com/carte/build/core/WInterrupts.c"/>
        <childnode refid="1546" relation="include">
        </childnode>
        <childnode refid="1547" relation="include">
        </childnode>
        <childnode refid="1548" relation="include">
        </childnode>
        <childnode refid="1549" relation="include">
        </childnode>
        <childnode refid="1550" relation="include">
        </childnode>
        <childnode refid="1545" relation="include">
        </childnode>
        <childnode refid="1551" relation="include">
        </childnode>
        <childnode refid="1554" relation="include">
        </childnode>
      </node>
      <node id="1551">
        <label>wiring.h</label>
        <link refid="motor_control_2build_2core_2wiring_8h"/>
        <childnode refid="1547" relation="include">
        </childnode>
        <childnode refid="1552" relation="include">
        </childnode>
        <childnode refid="1553" relation="include">
        </childnode>
      </node>
      <node id="1547">
        <label>avr/io.h</label>
      </node>
      <node id="1555">
        <label>avr/delay.h</label>
      </node>
      <node id="1549">
        <label>avr/pgmspace.h</label>
      </node>
      <node id="1553">
        <label>binary.h</label>
        <link refid="motor_control_2build_2core_2binary_8h"/>
      </node>
      <node id="1550">
        <label>stdio.h</label>
      </node>
      <node id="1546">
        <label>inttypes.h</label>
      </node>
      <node id="1554">
        <label>wiring_private.h</label>
        <link refid="motor_control_2build_2core_2wiring__private_8h"/>
        <childnode refid="1547" relation="include">
        </childnode>
        <childnode refid="1548" relation="include">
        </childnode>
        <childnode refid="1555" relation="include">
        </childnode>
        <childnode refid="1550" relation="include">
        </childnode>
        <childnode refid="1556" relation="include">
        </childnode>
        <childnode refid="1551" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1557">
        <label>com/carte/build/core/WInterrupts.c</label>
        <link refid="com/carte/build/core/WInterrupts.c"/>
        <childnode refid="1557" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="com_2carte_2build_2core_2_w_interrupts_8c_1aeb4ebff5fa3ae9c843479cf02ddb6994" prot="public" static="yes" mutable="no">
        <type><ref refid="motor_control_2build_2core_2wiring__private_8h_1a44181537ab6ea5631069dcd97b51bcff" kindref="member">voidFuncPtr</ref></type>
        <definition>volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS]</definition>
        <argsstring>[EXTERNAL_NUM_INTERRUPTS]</argsstring>
        <name>intFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" line="36" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="com_2carte_2build_2core_2_w_interrupts_8c_1ad0d73becebba7c663f8e9ed73efee544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void attachInterrupt</definition>
        <argsstring>(uint8_t interruptNum, void(*userFunc)(void), int mode)</argsstring>
        <name>attachInterrupt</name>
        <param>
          <type>uint8_t</type>
          <declname>interruptNum</declname>
        </param>
        <param>
          <type>void(*)(void)</type>
          <declname>userFunc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" line="39" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" bodystart="39" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2_w_interrupts_8c_1aa47ad728b5e830ac48f4085affea7d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void detachInterrupt</definition>
        <argsstring>(uint8_t interruptNum)</argsstring>
        <name>detachInterrupt</name>
        <param>
          <type>uint8_t</type>
          <declname>interruptNum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" line="119" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" bodystart="119" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIGNAL</definition>
        <argsstring>(INT0_vect)</argsstring>
        <name>SIGNAL</name>
        <param>
          <type>INT0_vect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" line="231" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" bodystart="231" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2_w_interrupts_8c_1a1a04cf82125bffd5064cb23fb0001499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIGNAL</definition>
        <argsstring>(INT1_vect)</argsstring>
        <name>SIGNAL</name>
        <param>
          <type>INT1_vect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" line="236" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c" bodystart="236" bodyend="239"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>mode:<sp/>jde;<sp/>c-basic-offset:<sp/>2;<sp/>indent-tabs-mode:<sp/>nil<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Part<sp/>of<sp/>the<sp/>Wiring<sp/>project<sp/>-<sp/>http://wiring.uniandes.edu.co</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2004-05<sp/>Hernando<sp/>Barragan</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>Public<sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>Modified<sp/>24<sp/>November<sp/>2006<sp/>by<sp/>David<sp/>A.<sp/>Mellis</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>Modified<sp/>1<sp/>August<sp/>2010<sp/>by<sp/>Mark<sp/>Sproul</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/interrupt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;avr/pgmspace.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;WConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="motor_control_2build_2core_2wiring__private_8h" kindref="compound">wiring_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1a44181537ab6ea5631069dcd97b51bcff" kindref="member">voidFuncPtr</ref><sp/>intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a3dab12da9f749340b6fc78148a7e3bd7" kindref="member">EXTERNAL_NUM_INTERRUPTS</ref>];</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>volatile<sp/>static<sp/>voidFuncPtr<sp/>twiIntFunc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="motor_control_2build_2core_2wiring_8h_1a3ed3d1d750935833a6f9b0363a5e6f13" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1ad0d73becebba7c663f8e9ed73efee544" kindref="member">attachInterrupt</ref>(uint8_t<sp/>interruptNum,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*userFunc)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(interruptNum<sp/>&lt;<sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1a3dab12da9f749340b6fc78148a7e3bd7" kindref="member">EXTERNAL_NUM_INTERRUPTS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[interruptNum]<sp/>=<sp/>userFunc;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Configure<sp/>the<sp/>interrupt<sp/>mode<sp/>(trigger<sp/>on<sp/>low<sp/>input,<sp/>any<sp/>change,<sp/>rising</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>edge,<sp/>or<sp/>falling<sp/>edge).<sp/><sp/>The<sp/>mode<sp/>constants<sp/>were<sp/>chosen<sp/>to<sp/>correspond</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>configuration<sp/>bits<sp/>in<sp/>the<sp/>hardware<sp/>register,<sp/>so<sp/>we<sp/>simply<sp/>shift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>mode<sp/>into<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>interrupt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(interruptNum)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EICRA)<sp/>&amp;&amp;<sp/>defined(EICRB)<sp/>&amp;&amp;<sp/>defined(EIMSK)</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRA<sp/>=<sp/>(EICRA<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC00)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC01)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC00);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRA<sp/>=<sp/>(EICRA<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC10)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC11)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC10);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRA<sp/>=<sp/>(EICRA<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC20)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC21)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC20);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRA<sp/>=<sp/>(EICRA<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC30)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC31)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC30);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT3);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRB<sp/>=<sp/>(EICRB<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC40)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC41)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC40);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT4);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRB<sp/>=<sp/>(EICRB<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC50)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC51)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC50);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT5);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRB<sp/>=<sp/>(EICRB<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC60)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC61)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC60);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT6);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRB<sp/>=<sp/>(EICRB<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC70)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC71)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC70);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT7);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(EICRA)<sp/>&amp;&amp;<sp/>defined(ISC00)<sp/>&amp;&amp;<sp/>defined(EIMSK)</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRA<sp/>=<sp/>(EICRA<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC00)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC01)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC00);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(MCUCR)<sp/>&amp;&amp;<sp/>defined(ISC00)<sp/>&amp;&amp;<sp/>defined(GICR)</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MCUCR<sp/>=<sp/>(MCUCR<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC00)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC01)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC00);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GICR<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(MCUCR)<sp/>&amp;&amp;<sp/>defined(ISC00)<sp/>&amp;&amp;<sp/>defined(GIMSK)</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MCUCR<sp/>=<sp/>(MCUCR<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC00)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC01)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC00);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>attachInterrupt<sp/>not<sp/>finished<sp/>for<sp/>this<sp/>CPU<sp/>(case<sp/>0)</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(EICRA)<sp/>&amp;&amp;<sp/>defined(ISC10)<sp/>&amp;&amp;<sp/>defined(ISC11)<sp/>&amp;&amp;<sp/>defined(EIMSK)</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EICRA<sp/>=<sp/>(EICRA<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC10)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC11)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC10);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(MCUCR)<sp/>&amp;&amp;<sp/>defined(ISC10)<sp/>&amp;&amp;<sp/>defined(ISC11)<sp/>&amp;&amp;<sp/>defined(GICR)</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MCUCR<sp/>=<sp/>(MCUCR<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC10)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC11)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC10);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GICR<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(MCUCR)<sp/>&amp;&amp;<sp/>defined(ISC10)<sp/>&amp;&amp;<sp/>defined(GIMSK)<sp/>&amp;&amp;<sp/>defined(GIMSK)</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MCUCR<sp/>=<sp/>(MCUCR<sp/>&amp;<sp/>~((1<sp/>&lt;&lt;<sp/>ISC10)<sp/>|<sp/>(1<sp/>&lt;&lt;<sp/>ISC11)))<sp/>|<sp/>(mode<sp/>&lt;&lt;<sp/>ISC10);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GIMSK<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#warning<sp/>attachInterrupt<sp/>may<sp/>need<sp/>some<sp/>more<sp/>work<sp/>for<sp/>this<sp/>cpu<sp/>(case<sp/>1)</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="motor_control_2build_2core_2wiring_8h_1ad13089b6768dfc38c8cbdf9ddee6db8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aa47ad728b5e830ac48f4085affea7d1c" kindref="member">detachInterrupt</ref>(uint8_t<sp/>interruptNum)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(interruptNum<sp/>&lt;<sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1a3dab12da9f749340b6fc78148a7e3bd7" kindref="member">EXTERNAL_NUM_INTERRUPTS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>the<sp/>interrupt.<sp/><sp/>(We<sp/>can&apos;t<sp/>assume<sp/>that<sp/>interruptNum<sp/>is<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>number<sp/>of<sp/>the<sp/>EIMSK<sp/>bit<sp/>to<sp/>clear,<sp/>as<sp/>this<sp/>isn&apos;t<sp/>true<sp/>on<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ATmega8.<sp/><sp/>There,<sp/>INT0<sp/>is<sp/>6<sp/>and<sp/>INT1<sp/>is<sp/>7.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(interruptNum)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EICRA)<sp/>&amp;&amp;<sp/>defined(EICRB)<sp/>&amp;&amp;<sp/>defined(EIMSK)</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT2);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT3);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT4);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT5);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT6);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT7);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(EIMSK)<sp/>&amp;&amp;<sp/>defined(INT0)</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(GICR)<sp/>&amp;&amp;<sp/>defined(ISC00)</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GICR<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT0);<sp/></highlight><highlight class="comment">//<sp/>atmega32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(GIMSK)<sp/>&amp;&amp;<sp/>defined(INT0)</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>detachInterrupt<sp/>not<sp/>finished<sp/>for<sp/>this<sp/>cpu</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(EIMSK)<sp/>&amp;&amp;<sp/>defined(INT1)</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(GICR)<sp/>&amp;&amp;<sp/>defined(INT1)</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GICR<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT1);<sp/></highlight><highlight class="comment">//<sp/>atmega32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(GIMSK)<sp/>&amp;&amp;<sp/>defined(INT1)</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GIMSK<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>INT1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#warning<sp/>detachInterrupt<sp/>may<sp/>need<sp/>some<sp/>more<sp/>work<sp/>for<sp/>this<sp/>cpu<sp/>(case<sp/>1)</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[interruptNum]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="182"><highlight class="comment">void<sp/>attachInterruptTwi(void<sp/>(*userFunc)(void)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>twiIntFunc<sp/>=<sp/>userFunc;</highlight></codeline>
<codeline lineno="184"><highlight class="comment">}</highlight></codeline>
<codeline lineno="185"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(EICRA)<sp/>&amp;&amp;<sp/>defined(EICRB)</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT0_vect)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a934a70c53ad0fb697134ff64bc7bf5df" kindref="member">EXTERNAL_INT_2</ref>])</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_2]();</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT1_vect)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac5041114b634c03558741a0ae7439be7" kindref="member">EXTERNAL_INT_3</ref>])</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_3]();</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT2_vect)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a715be2c5d2474b26366616943537d9df" kindref="member">EXTERNAL_INT_4</ref>])</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_4]();</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT3_vect)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a553812a383ca304c6e1709aea750cc1b" kindref="member">EXTERNAL_INT_5</ref>])</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_5]();</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT4_vect)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1ae5fd0cb8976ac0c88ec4b1fc954132c0" kindref="member">EXTERNAL_INT_0</ref>])</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_0]();</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT5_vect)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a8c2c195748bb5496b510a201f1c57c08" kindref="member">EXTERNAL_INT_1</ref>])</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_1]();</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT6_vect)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a0464af4de80670cce58e82c5d2aa6979" kindref="member">EXTERNAL_INT_6</ref>])</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_6]();</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT7_vect)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a1865700db9dfb6627f79d3f3fcedbda4" kindref="member">EXTERNAL_INT_7</ref>])</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_7]();</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" refkind="member"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT0_vect)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1ae5fd0cb8976ac0c88ec4b1fc954132c0" kindref="member">EXTERNAL_INT_0</ref>])</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_0]();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="com_2carte_2build_2core_2_w_interrupts_8c_1a1a04cf82125bffd5064cb23fb0001499" refkind="member"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(INT1_vect)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(intFunc[<ref refid="com_2carte_2build_2core_2wiring__private_8h_1a8c2c195748bb5496b510a201f1c57c08" kindref="member">EXTERNAL_INT_1</ref>])</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>intFunc[EXTERNAL_INT_1]();</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="244"><highlight class="comment">SIGNAL(SIG_2WIRE_SERIAL)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/>if(twiIntFunc)</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>twiIntFunc();</highlight></codeline>
<codeline lineno="247"><highlight class="comment">}</highlight></codeline>
<codeline lineno="248"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/WInterrupts.c"/>
  </compounddef>
</doxygen>
