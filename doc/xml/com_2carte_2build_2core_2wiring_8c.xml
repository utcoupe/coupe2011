<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="com_2carte_2build_2core_2wiring_8c" kind="file">
    <compoundname>wiring.c</compoundname>
    <includes refid="motor_control_2build_2core_2wiring__private_8h" local="yes">wiring_private.h</includes>
    <incdepgraph>
      <node id="1577">
        <label>stdarg.h</label>
      </node>
      <node id="1574">
        <label>avr/interrupt.h</label>
      </node>
      <node id="1579">
        <label>stdlib.h</label>
      </node>
      <node id="1571">
        <label>com/carte/build/core/wiring.c</label>
        <link refid="com/carte/build/core/wiring.c"/>
        <childnode refid="1572" relation="include">
        </childnode>
      </node>
      <node id="1578">
        <label>wiring.h</label>
        <link refid="motor_control_2build_2core_2wiring_8h"/>
        <childnode refid="1573" relation="include">
        </childnode>
        <childnode refid="1579" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
      </node>
      <node id="1573">
        <label>avr/io.h</label>
      </node>
      <node id="1575">
        <label>avr/delay.h</label>
      </node>
      <node id="1580">
        <label>binary.h</label>
        <link refid="motor_control_2build_2core_2binary_8h"/>
      </node>
      <node id="1576">
        <label>stdio.h</label>
      </node>
      <node id="1572">
        <label>wiring_private.h</label>
        <link refid="motor_control_2build_2core_2wiring__private_8h"/>
        <childnode refid="1573" relation="include">
        </childnode>
        <childnode refid="1574" relation="include">
        </childnode>
        <childnode refid="1575" relation="include">
        </childnode>
        <childnode refid="1576" relation="include">
        </childnode>
        <childnode refid="1577" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="com_2carte_2build_2core_2wiring_8c_1ab1d369d575d0937b2064adbaab91594d" prot="public" static="no">
        <name>MICROSECONDS_PER_TIMER0_OVERFLOW</name>
        <initializer>(clockCyclesToMicroseconds(64 * 256))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="29" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="com_2carte_2build_2core_2wiring_8c_1ab640966289e34d6fe31434f37090e6e6" prot="public" static="no">
        <name>MILLIS_INC</name>
        <initializer>(MICROSECONDS_PER_TIMER0_OVERFLOW / 1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="32" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="com_2carte_2build_2core_2wiring_8c_1a5647e40017bbd34a202f6a672ca116e4" prot="public" static="no">
        <name>FRACT_INC</name>
        <initializer>((MICROSECONDS_PER_TIMER0_OVERFLOW % 1000) &gt;&gt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="37" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="com_2carte_2build_2core_2wiring_8c_1a3d5262b0f828700a2ce29198838e0d9e" prot="public" static="no">
        <name>FRACT_MAX</name>
        <initializer>(1000 &gt;&gt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="38" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="com_2carte_2build_2core_2wiring_8c_1a79a4c8c254cfb57c6ac3393a396c7a4f" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>volatile unsigned long timer0_overflow_count</definition>
        <argsstring></argsstring>
        <name>timer0_overflow_count</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="40" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="com_2carte_2build_2core_2wiring_8c_1ab34d3974411fdee7da8c6b4f650502e9" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>volatile unsigned long timer0_millis</definition>
        <argsstring></argsstring>
        <name>timer0_millis</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="41" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="com_2carte_2build_2core_2wiring_8c_1abd72ead26f907a0cb6ebaafffba22213" prot="public" static="yes" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char timer0_fract</definition>
        <argsstring></argsstring>
        <name>timer0_fract</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="42" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="com_2carte_2build_2core_2wiring_8c_1a246b39a3dbbdc17e03e35f022d8101cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SIGNAL</definition>
        <argsstring>(TIMER0_OVF_vect)</argsstring>
        <name>SIGNAL</name>
        <param>
          <type>TIMER0_OVF_vect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="45" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="44" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2wiring_8c_1a6ff7f2532a22366f0013bc41397129fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long millis</definition>
        <argsstring>()</argsstring>
        <name>millis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="64" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="63" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2wiring_8c_1a8b24cbb7c3486e1bfa05c86db83ecb01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long micros</definition>
        <argsstring>()</argsstring>
        <name>micros</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="77" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="77" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2wiring_8c_1a6bc5f943544a887f8b23cadfb26a5e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delay</definition>
        <argsstring>(unsigned long ms)</argsstring>
        <name>delay</name>
        <param>
          <type>unsigned long</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="106" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="105" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2wiring_8c_1a62e0a53bc261f9de8700cc5a92307e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delayMicroseconds</definition>
        <argsstring>(unsigned int us)</argsstring>
        <name>delayMicroseconds</name>
        <param>
          <type>unsigned int</type>
          <declname>us</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="119" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="118" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="com_2carte_2build_2core_2wiring_8c_1a02fd73d861ef2e4aabb38c0c9ff82947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" line="168" bodyfile="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c" bodystart="167" bodyend="289"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>wiring.c<sp/>-<sp/>Partial<sp/>implementation<sp/>of<sp/>the<sp/>Wiring<sp/>API<sp/>for<sp/>the<sp/>ATmega8.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Part<sp/>of<sp/>Arduino<sp/>-<sp/>http://www.arduino.cc/</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2005-2006<sp/>David<sp/>A.<sp/>Mellis</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>Public<sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>$Id$</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="motor_control_2build_2core_2wiring__private_8h" kindref="compound">wiring_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>prescaler<sp/>is<sp/>set<sp/>so<sp/>that<sp/>timer0<sp/>ticks<sp/>every<sp/>64<sp/>clock<sp/>cycles,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>overflow<sp/>handler<sp/>is<sp/>called<sp/>every<sp/>256<sp/>ticks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="com_2carte_2build_2core_2wiring_8c_1ab1d369d575d0937b2064adbaab91594d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MICROSECONDS_PER_TIMER0_OVERFLOW<sp/>(clockCyclesToMicroseconds(64<sp/>*<sp/>256))</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>whole<sp/>number<sp/>of<sp/>milliseconds<sp/>per<sp/>timer0<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="com_2carte_2build_2core_2wiring_8c_1ab640966289e34d6fe31434f37090e6e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MILLIS_INC<sp/>(MICROSECONDS_PER_TIMER0_OVERFLOW<sp/>/<sp/>1000)</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>fractional<sp/>number<sp/>of<sp/>milliseconds<sp/>per<sp/>timer0<sp/>overflow.<sp/>we<sp/>shift<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>three<sp/>to<sp/>fit<sp/>these<sp/>numbers<sp/>into<sp/>a<sp/>byte.<sp/>(for<sp/>the<sp/>clock<sp/>speeds<sp/>we<sp/>care</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>about<sp/>-<sp/>8<sp/>and<sp/>16<sp/>MHz<sp/>-<sp/>this<sp/>doesn&apos;t<sp/>lose<sp/>precision.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="com_2carte_2build_2core_2wiring_8c_1a5647e40017bbd34a202f6a672ca116e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FRACT_INC<sp/>((MICROSECONDS_PER_TIMER0_OVERFLOW<sp/>%<sp/>1000)<sp/>&gt;&gt;<sp/>3)</highlight></codeline>
<codeline lineno="38" refid="com_2carte_2build_2core_2wiring_8c_1a3d5262b0f828700a2ce29198838e0d9e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FRACT_MAX<sp/>(1000<sp/>&gt;&gt;<sp/>3)</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="com_2carte_2build_2core_2wiring_8c_1a79a4c8c254cfb57c6ac3393a396c7a4f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a79a4c8c254cfb57c6ac3393a396c7a4f" kindref="member">timer0_overflow_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41" refid="com_2carte_2build_2core_2wiring_8c_1ab34d3974411fdee7da8c6b4f650502e9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1ab34d3974411fdee7da8c6b4f650502e9" kindref="member">timer0_millis</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timer0_fract<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="com_2carte_2build_2core_2wiring_8c_1a246b39a3dbbdc17e03e35f022d8101cd" refkind="member"><highlight class="normal"><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(TIMER0_OVF_vect)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>these<sp/>to<sp/>local<sp/>variables<sp/>so<sp/>they<sp/>can<sp/>be<sp/>stored<sp/>in<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(volatile<sp/>variables<sp/>must<sp/>be<sp/>read<sp/>from<sp/>memory<sp/>on<sp/>every<sp/>access)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m<sp/>=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1ab34d3974411fdee7da8c6b4f650502e9" kindref="member">timer0_millis</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>timer0_fract;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>+=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1ab640966289e34d6fe31434f37090e6e6" kindref="member">MILLIS_INC</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>+=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a5647e40017bbd34a202f6a672ca116e4" kindref="member">FRACT_INC</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>&gt;=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a3d5262b0f828700a2ce29198838e0d9e" kindref="member">FRACT_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>-=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a3d5262b0f828700a2ce29198838e0d9e" kindref="member">FRACT_MAX</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer0_fract<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1ab34d3974411fdee7da8c6b4f650502e9" kindref="member">timer0_millis</ref><sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a79a4c8c254cfb57c6ac3393a396c7a4f" kindref="member">timer0_overflow_count</ref>++;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="motor_control_2build_2core_2wiring_8h_1a1871228c14c912ca1479cf826ddcb07f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a6ff7f2532a22366f0013bc41397129fd" kindref="member">millis</ref>()</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>oldSREG<sp/>=<sp/>SREG;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disable<sp/>interrupts<sp/>while<sp/>we<sp/>read<sp/>timer0_millis<sp/>or<sp/>we<sp/>might<sp/>get<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inconsistent<sp/>value<sp/>(e.g.<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>a<sp/>write<sp/>to<sp/>timer0_millis)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cli();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1ab34d3974411fdee7da8c6b4f650502e9" kindref="member">timer0_millis</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SREG<sp/>=<sp/>oldSREG;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="motor_control_2build_2core_2wiring_8h_1a705e7f8e2a34e0e2447e933ebf56b4d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a8b24cbb7c3486e1bfa05c86db83ecb01" kindref="member">micros</ref>()<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>oldSREG<sp/>=<sp/>SREG,<sp/><ref refid="namespacescreen_1a391180925962f2d8178b40fbbb862d17" kindref="member">t</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cli();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a79a4c8c254cfb57c6ac3393a396c7a4f" kindref="member">timer0_overflow_count</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCNT0)</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>TCNT0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCNT0L)</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>TCNT0L;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>TIMER<sp/>0<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>TIFR0</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((TIFR0<sp/>&amp;<sp/>_BV(TOV0))<sp/>&amp;&amp;<sp/>(t<sp/>&lt;<sp/>255))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m++;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((TIFR<sp/>&amp;<sp/>_BV(TOV0))<sp/>&amp;&amp;<sp/>(t<sp/>&lt;<sp/>255))</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m++;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SREG<sp/>=<sp/>oldSREG;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((m<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>t)<sp/>*<sp/>(64<sp/>/<sp/><ref refid="com_2carte_2build_2core_2wiring_8h_1ae6741cdb6d1d3f17299b9874ddc2c12e" kindref="member">clockCyclesPerMicrosecond</ref>());</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="motor_control_2build_2core_2wiring_8h_1ab074fe18b447a055b6dbcd5f9a484db5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a6bc5f943544a887f8b23cadfb26a5e30" kindref="member">delay</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ms)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>start<sp/>=<sp/>(uint16_t)<ref refid="com_2carte_2build_2core_2wiring_8c_1a8b24cbb7c3486e1bfa05c86db83ecb01" kindref="member">micros</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ms<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((uint16_t)<ref refid="com_2carte_2build_2core_2wiring_8c_1a8b24cbb7c3486e1bfa05c86db83ecb01" kindref="member">micros</ref>()<sp/>-<sp/>start)<sp/>&gt;=<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms--;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>1000;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Delay<sp/>for<sp/>the<sp/>given<sp/>number<sp/>of<sp/>microseconds.<sp/><sp/>Assumes<sp/>a<sp/>8<sp/>or<sp/>16<sp/>MHz<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="motor_control_2build_2core_2wiring_8h_1a62e0a53bc261f9de8700cc5a92307e85" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a62e0a53bc261f9de8700cc5a92307e85" kindref="member">delayMicroseconds</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>us)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>calling<sp/>avrlib&apos;s<sp/>delay_us()<sp/>function<sp/>with<sp/>low<sp/>values<sp/>(e.g.<sp/>1<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>microseconds)<sp/>gives<sp/>delays<sp/>longer<sp/>than<sp/>desired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//delay_us(us);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>F_CPU<sp/>&gt;=<sp/>16000000L</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>16<sp/>MHz<sp/>clock<sp/>on<sp/>most<sp/>Arduino<sp/>boards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>one-microsecond<sp/>delay,<sp/>simply<sp/>return.<sp/><sp/>the<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>function<sp/>call<sp/>yields<sp/>a<sp/>delay<sp/>of<sp/>approximately<sp/>1<sp/>1/8<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--us<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>loop<sp/>takes<sp/>a<sp/>quarter<sp/>of<sp/>a<sp/>microsecond<sp/>(4<sp/>cycles)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>per<sp/>iteration,<sp/>so<sp/>execute<sp/>it<sp/>four<sp/>times<sp/>for<sp/>each<sp/>microsecond<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delay<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>us<sp/>&lt;&lt;=<sp/>2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>account<sp/>for<sp/>the<sp/>time<sp/>taken<sp/>in<sp/>the<sp/>preceeding<sp/>commands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>us<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>8<sp/>MHz<sp/>internal<sp/>clock<sp/>on<sp/>the<sp/>ATmega168</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>one-<sp/>or<sp/>two-microsecond<sp/>delay,<sp/>simply<sp/>return.<sp/><sp/>the<sp/>overhead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>function<sp/>calls<sp/>takes<sp/>more<sp/>than<sp/>two<sp/>microseconds.<sp/><sp/>can&apos;t<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subtract<sp/>two,<sp/>since<sp/>us<sp/>is<sp/>unsigned;<sp/>we&apos;d<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--us<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--us<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>loop<sp/>takes<sp/>half<sp/>of<sp/>a<sp/>microsecond<sp/>(4<sp/>cycles)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>per<sp/>iteration,<sp/>so<sp/>execute<sp/>it<sp/>twice<sp/>for<sp/>each<sp/>microsecond<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delay<sp/>requested.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>us<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>partially<sp/>compensate<sp/>for<sp/>the<sp/>time<sp/>taken<sp/>by<sp/>the<sp/>preceeding<sp/>commands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>can&apos;t<sp/>subtract<sp/>any<sp/>more<sp/>than<sp/>this<sp/>or<sp/>we&apos;d<sp/>overflow<sp/>w/<sp/>small<sp/>delays.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>us--;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>busy<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__asm__<sp/>__volatile__<sp/>(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;1:<sp/>sbiw<sp/>%0,1&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\n\t&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>2<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;brne<sp/>1b&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=w&quot;</highlight><highlight class="normal"><sp/>(us)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(us)<sp/></highlight><highlight class="comment">//<sp/>2<sp/>cycles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="motor_control_2build_2core_2wiring_8h_1a2858154e2009b0e6e616f313177762bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="com_2carte_2build_2core_2wiring_8c_1a02fd73d861ef2e4aabb38c0c9ff82947" kindref="member">init</ref>()</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>called<sp/>before<sp/>setup()<sp/>or<sp/>some<sp/>functions<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>work<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sei();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>ATmega168,<sp/>timer<sp/>0<sp/>is<sp/>also<sp/>used<sp/>for<sp/>fast<sp/>hardware<sp/>pwm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(using<sp/>phase-correct<sp/>PWM<sp/>would<sp/>mean<sp/>that<sp/>timer<sp/>0<sp/>overflowed<sp/>half<sp/>as<sp/>often</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resulting<sp/>in<sp/>different<sp/>millis()<sp/>behavior<sp/>on<sp/>the<sp/>ATmega8<sp/>and<sp/>ATmega168)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR0A)<sp/>&amp;&amp;<sp/>defined(WGM01)</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0A,<sp/>WGM01);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0A,<sp/>WGM00);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>0<sp/>prescale<sp/>factor<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR_ATmega128__)</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CPU<sp/>specific:<sp/>different<sp/>values<sp/>for<sp/>the<sp/>ATmega128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0,<sp/>CS02);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR0)<sp/>&amp;&amp;<sp/>defined(CS01)<sp/>&amp;&amp;<sp/>defined(CS00)</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>combination<sp/>is<sp/>for<sp/>the<sp/>standard<sp/>atmega8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0,<sp/>CS01);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0,<sp/>CS00);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR0B)<sp/>&amp;&amp;<sp/>defined(CS01)<sp/>&amp;&amp;<sp/>defined(CS00)</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>combination<sp/>is<sp/>for<sp/>the<sp/>standard<sp/>168/328/1280/2560</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0B,<sp/>CS01);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0B,<sp/>CS00);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR0A)<sp/>&amp;&amp;<sp/>defined(CS01)<sp/>&amp;&amp;<sp/>defined(CS00)</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>combination<sp/>is<sp/>for<sp/>the<sp/>__AVR_ATmega645__<sp/>series</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0A,<sp/>CS01);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR0A,<sp/>CS00);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>Timer<sp/>0<sp/>prescale<sp/>factor<sp/>64<sp/>not<sp/>set<sp/>correctly</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>timer<sp/>0<sp/>overflow<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMSK)<sp/>&amp;&amp;<sp/>defined(TOIE0)</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TIMSK,<sp/>TOIE0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TIMSK0)<sp/>&amp;&amp;<sp/>defined(TOIE0)</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TIMSK0,<sp/>TOIE0);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/><sp/>Timer<sp/>0<sp/>overflow<sp/>interrupt<sp/>not<sp/>set<sp/>correctly</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timers<sp/>1<sp/>and<sp/>2<sp/>are<sp/>used<sp/>for<sp/>phase-correct<sp/>hardware<sp/>pwm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>better<sp/>for<sp/>motors<sp/>as<sp/>it<sp/>ensures<sp/>an<sp/>even<sp/>waveform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>note,<sp/>however,<sp/>that<sp/>fast<sp/>pwm<sp/>mode<sp/>can<sp/>achieve<sp/>a<sp/>frequency<sp/>of<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8<sp/>MHz<sp/>(with<sp/>a<sp/>16<sp/>MHz<sp/>clock)<sp/>at<sp/>50%<sp/>duty<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TCCR1B<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>1<sp/>prescale<sp/>factor<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR1B)<sp/>&amp;&amp;<sp/>defined(CS11)<sp/>&amp;&amp;<sp/>defined(CS10)</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR1B,<sp/>CS11);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR1B,<sp/>CS10);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR1)<sp/>&amp;&amp;<sp/>defined(CS11)<sp/>&amp;&amp;<sp/>defined(CS10)</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR1,<sp/>CS11);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR1,<sp/>CS10);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>timer<sp/>1<sp/>in<sp/>8-bit<sp/>phase<sp/>correct<sp/>pwm<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR1A)<sp/>&amp;&amp;<sp/>defined(WGM10)</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR1A,<sp/>WGM10);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR1)</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#warning<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>finished</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>2<sp/>prescale<sp/>factor<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR2)<sp/>&amp;&amp;<sp/>defined(CS22)</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR2,<sp/>CS22);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR2B)<sp/>&amp;&amp;<sp/>defined(CS22)</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR2B,<sp/>CS22);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#warning<sp/>Timer<sp/>2<sp/>not<sp/>finished<sp/>(may<sp/>not<sp/>be<sp/>present<sp/>on<sp/>this<sp/>CPU)</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>configure<sp/>timer<sp/>2<sp/>for<sp/>phase<sp/>correct<sp/>pwm<sp/>(8-bit)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR2)<sp/>&amp;&amp;<sp/>defined(WGM20)</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR2,<sp/>WGM20);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TCCR2A)<sp/>&amp;&amp;<sp/>defined(WGM20)</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR2A,<sp/>WGM20);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#warning<sp/>Timer<sp/>2<sp/>not<sp/>finished<sp/>(may<sp/>not<sp/>be<sp/>present<sp/>on<sp/>this<sp/>CPU)</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR3B)<sp/>&amp;&amp;<sp/>defined(CS31)<sp/>&amp;&amp;<sp/>defined(WGM30)</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR3B,<sp/>CS31);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>3<sp/>prescale<sp/>factor<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR3B,<sp/>CS30);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR3A,<sp/>WGM30);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>timer<sp/>3<sp/>in<sp/>8-bit<sp/>phase<sp/>correct<sp/>pwm<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR4B)<sp/>&amp;&amp;<sp/>defined(CS41)<sp/>&amp;&amp;<sp/>defined(WGM40)</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR4B,<sp/>CS41);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>4<sp/>prescale<sp/>factor<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR4B,<sp/>CS40);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR4A,<sp/>WGM40);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>timer<sp/>4<sp/>in<sp/>8-bit<sp/>phase<sp/>correct<sp/>pwm<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TCCR5B)<sp/>&amp;&amp;<sp/>defined(CS51)<sp/>&amp;&amp;<sp/>defined(WGM50)</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR5B,<sp/>CS51);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>timer<sp/>5<sp/>prescale<sp/>factor<sp/>to<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR5B,<sp/>CS50);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(TCCR5A,<sp/>WGM50);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>timer<sp/>5<sp/>in<sp/>8-bit<sp/>phase<sp/>correct<sp/>pwm<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ADCSRA)</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>a2d<sp/>prescale<sp/>factor<sp/>to<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16<sp/>MHz<sp/>/<sp/>128<sp/>=<sp/>125<sp/>KHz,<sp/>inside<sp/>the<sp/>desired<sp/>50-200<sp/>KHz<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>this<sp/>will<sp/>not<sp/>work<sp/>properly<sp/>for<sp/>other<sp/>clock<sp/>speeds,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>code<sp/>should<sp/>use<sp/>F_CPU<sp/>to<sp/>determine<sp/>the<sp/>prescale<sp/>factor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(ADCSRA,<sp/>ADPS2);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(ADCSRA,<sp/>ADPS1);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(ADCSRA,<sp/>ADPS0);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enable<sp/>a2d<sp/>conversions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(ADCSRA,<sp/>ADEN);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>bootloader<sp/>connects<sp/>pins<sp/>0<sp/>and<sp/>1<sp/>to<sp/>the<sp/>USART;<sp/>disconnect<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>so<sp/>they<sp/>can<sp/>be<sp/>used<sp/>as<sp/>normal<sp/>digital<sp/>i/o;<sp/>they<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reconnected<sp/>in<sp/>Serial.begin()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UCSRB)</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UCSRB<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(UCSR0B)</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UCSR0B<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/com/carte/build/core/wiring.c"/>
  </compounddef>
</doxygen>
