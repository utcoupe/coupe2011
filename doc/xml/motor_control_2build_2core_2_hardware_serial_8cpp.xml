<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="motor_control_2build_2core_2_hardware_serial_8cpp" kind="file">
    <compoundname>HardwareSerial.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">inttypes.h</includes>
    <includes refid="motor_control_2build_2core_2_hardware_serial_8cpp" local="yes">wiring.h</includes>
    <includes local="no">avr/io.h</includes>
    <includes local="no">avr/interrupt.h</includes>
    <includes local="no">avr/delay.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes refid="motor_control_2build_2core_2wiring_8h" local="yes">wiring.h</includes>
    <includedby refid="motor_control_2build_2core_2_hardware_serial_8cpp" local="yes">motorControl/build/core/HardwareSerial.cpp</includedby>
    <incdepgraph>
      <node id="1387">
        <label>stdarg.h</label>
      </node>
      <node id="1385">
        <label>avr/interrupt.h</label>
      </node>
      <node id="1380">
        <label>stdlib.h</label>
      </node>
      <node id="1388">
        <label>wiring.h</label>
        <link refid="motor_control_2build_2core_2wiring_8h"/>
        <childnode refid="1384" relation="include">
        </childnode>
        <childnode refid="1380" relation="include">
        </childnode>
        <childnode refid="1389" relation="include">
        </childnode>
      </node>
      <node id="1384">
        <label>avr/io.h</label>
      </node>
      <node id="1386">
        <label>avr/delay.h</label>
      </node>
      <node id="1382">
        <label>string.h</label>
      </node>
      <node id="1379">
        <label>motorControl/build/core/HardwareSerial.cpp</label>
        <link refid="motorControl/build/core/HardwareSerial.cpp"/>
        <childnode refid="1380" relation="include">
        </childnode>
        <childnode refid="1381" relation="include">
        </childnode>
        <childnode refid="1382" relation="include">
        </childnode>
        <childnode refid="1383" relation="include">
        </childnode>
        <childnode refid="1379" relation="include">
        </childnode>
        <childnode refid="1384" relation="include">
        </childnode>
        <childnode refid="1385" relation="include">
        </childnode>
        <childnode refid="1386" relation="include">
        </childnode>
        <childnode refid="1387" relation="include">
        </childnode>
        <childnode refid="1388" relation="include">
        </childnode>
      </node>
      <node id="1389">
        <label>binary.h</label>
        <link refid="motor_control_2build_2core_2binary_8h"/>
      </node>
      <node id="1381">
        <label>stdio.h</label>
      </node>
      <node id="1383">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1390">
        <label>motorControl/build/core/HardwareSerial.cpp</label>
        <link refid="motorControl/build/core/HardwareSerial.cpp"/>
        <childnode refid="1390" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/>HardwareSerial.cpp<sp/>-<sp/>Hardware<sp/>serial<sp/>library<sp/>for<sp/>Wiring</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Copyright<sp/>(c)<sp/>2006<sp/>Nicholas<sp/>Zambetti.<sp/><sp/>All<sp/>right<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>St,<sp/>Fifth<sp/>Floor,<sp/>Boston,<sp/>MA<sp/><sp/>02110-1301<sp/><sp/>USA</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>Modified<sp/>23<sp/>November<sp/>2006<sp/>by<sp/>David<sp/>A.<sp/>Mellis</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>Modified<sp/>28<sp/>September<sp/>2010<sp/>by<sp/>Mark<sp/>Sproul</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="motor_control_2build_2core_2wiring_8h" kindref="compound">wiring.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;wiring_private.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>next<sp/>line<sp/>disables<sp/>the<sp/>entire<sp/>HardwareSerial.cpp,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>so<sp/>I<sp/>can<sp/>support<sp/>Attiny<sp/>series<sp/>and<sp/>any<sp/>other<sp/>chip<sp/>without<sp/>a<sp/>uart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRRH)<sp/>||<sp/>defined(UBRR0H)<sp/>||<sp/>defined(UBRR1H)<sp/>||<sp/>defined(UBRR2H)<sp/>||<sp/>defined(UBRR3H)</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;HardwareSerial.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>constants<sp/>and<sp/>variables<sp/>for<sp/>buffering<sp/>incoming<sp/>serial<sp/>data.<sp/><sp/>We&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>using<sp/>a<sp/>ring<sp/>buffer<sp/>(I<sp/>think),<sp/>in<sp/>which<sp/>rx_buffer_head<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>location<sp/>to<sp/>which<sp/>to<sp/>write<sp/>the<sp/>next<sp/>incoming<sp/>character<sp/>and<sp/>rx_buffer_tail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>location<sp/>from<sp/>which<sp/>to<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(RAMEND<sp/>&lt;<sp/>1000)</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>RX_BUFFER_SIZE<sp/>32</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>RX_BUFFER_SIZE<sp/>128</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ring_buffer</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[RX_BUFFER_SIZE];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRRH)<sp/>||<sp/>defined(UBRR0H)</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ring_buffer<sp/>rx_buffer<sp/><sp/>=<sp/><sp/>{<sp/>{<sp/>0<sp/>},<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRR1H)</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ring_buffer<sp/>rx_buffer1<sp/><sp/>=<sp/><sp/>{<sp/>{<sp/>0<sp/>},<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRR2H)</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ring_buffer<sp/>rx_buffer2<sp/><sp/>=<sp/><sp/>{<sp/>{<sp/>0<sp/>},<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRR3H)</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ring_buffer<sp/>rx_buffer3<sp/><sp/>=<sp/><sp/>{<sp/>{<sp/>0<sp/>},<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>store_char(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>ring_buffer<sp/>*rx_buffer)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(rx_buffer-&gt;head<sp/>+<sp/>1)<sp/>%<sp/>RX_BUFFER_SIZE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>should<sp/>be<sp/>storing<sp/>the<sp/>received<sp/>character<sp/>into<sp/>the<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>before<sp/>the<sp/>tail<sp/>(meaning<sp/>that<sp/>the<sp/>head<sp/>would<sp/>advance<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>location<sp/>of<sp/>the<sp/>tail),<sp/>we&apos;re<sp/>about<sp/>to<sp/>overflow<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>so<sp/>we<sp/>don&apos;t<sp/>write<sp/>the<sp/>character<sp/>or<sp/>advance<sp/>the<sp/>head.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>rx_buffer-&gt;tail)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_buffer-&gt;buffer[rx_buffer-&gt;head]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>rx_buffer-&gt;head<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USART_RX_vect)</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(USART_RX_vect)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(UDR0)</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(UDR)</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR;<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>atmega8535</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>UDR<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIG_USART0_RECV)<sp/>&amp;&amp;<sp/>defined(UDR0)</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(SIG_USART0_RECV)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIG_UART0_RECV)<sp/>&amp;&amp;<sp/>defined(UDR0)</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(SIG_UART0_RECV)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//#elif<sp/>defined(SIG_USART_RECV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USART0_RX_vect)</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fixed<sp/>by<sp/>Mark<sp/>Sproul<sp/>this<sp/>is<sp/>on<sp/>the<sp/>644/644p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SIGNAL(SIG_USART_RECV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(USART0_RX_vect)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(UDR0)</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(UDR)</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR;<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>atmega8,<sp/>atmega32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>UDR<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIG_UART_RECV)</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>for<sp/>atmega8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(SIG_UART_RECV)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(UDR0)</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR0;<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>atmega645</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(UDR)</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/><sp/>=<sp/><sp/>UDR;<sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>atmega8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USBCON)</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#warning<sp/>No<sp/>interrupt<sp/>handler<sp/>for<sp/>usart<sp/>0</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#warning<sp/>Serial(0)<sp/>is<sp/>on<sp/>USB<sp/>interface</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>No<sp/>interrupt<sp/>handler<sp/>for<sp/>usart<sp/>0</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//#if<sp/>defined(SIG_USART1_RECV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USART1_RX_vect)</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SIGNAL(SIG_USART1_RECV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(USART1_RX_vect)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>UDR1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIG_USART1_RECV)</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>SIG_USART1_RECV</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USART2_RX_vect)<sp/>&amp;&amp;<sp/>defined(UDR2)</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(USART2_RX_vect)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>UDR2;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer2);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIG_USART2_RECV)</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>SIG_USART2_RECV</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USART3_RX_vect)<sp/>&amp;&amp;<sp/>defined(UDR3)</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2_w_interrupts_8c_1aff4e8fbc8021c24a310d1f5d63d9031d" kindref="member">SIGNAL</ref>(USART3_RX_vect)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>UDR3;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>store_char(c,<sp/>&amp;rx_buffer3);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SIG_USART3_RECV)</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>SIG_USART3_RECV</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructors<sp/>////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="class_hardware_serial_1adf3e7a7ac1006aeb934b506d502859b1" kindref="member">HardwareSerial::HardwareSerial</ref>(ring_buffer<sp/>*rx_buffer,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ubrrh,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ubrrl,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ucsra,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ucsrb,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*udr,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>uint8_t<sp/>rxen,<sp/>uint8_t<sp/>txen,<sp/>uint8_t<sp/>rxcie,<sp/>uint8_t<sp/>udre,<sp/>uint8_t<sp/>u2x)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>_rx_buffer<sp/>=<sp/>rx_buffer;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>_ubrrh<sp/>=<sp/>ubrrh;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>_ubrrl<sp/>=<sp/>ubrrl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>_ucsra<sp/>=<sp/>ucsra;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>_ucsrb<sp/>=<sp/>ucsrb;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>_udr<sp/>=<sp/>udr;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>_rxen<sp/>=<sp/>rxen;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>_txen<sp/>=<sp/>txen;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>_rxcie<sp/>=<sp/>rxcie;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>_udre<sp/>=<sp/>udre;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>_u2x<sp/>=<sp/>u2x;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Public<sp/>Methods<sp/>//////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1acea43a2b9c704ddf0a7c5f8b7859816c" kindref="member">HardwareSerial::begin</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>baud)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>uint16_t<sp/>baud_setting;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_u2x<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>F_CPU<sp/>==<sp/>16000000UL</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>hardcoded<sp/>exception<sp/>for<sp/>compatibility<sp/>with<sp/>the<sp/>bootloader<sp/>shipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>Duemilanove<sp/>and<sp/>previous<sp/>boards<sp/>and<sp/>the<sp/>firmware<sp/>on<sp/>the<sp/>8U2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>Uno<sp/>and<sp/>Mega<sp/>2560.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baud<sp/>==<sp/>57600)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>use_u2x<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_u2x)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>*_ucsra<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>_u2x;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>baud_setting<sp/>=<sp/>(F_CPU<sp/>/<sp/>4<sp/>/<sp/>baud<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>*_ucsra<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>baud_setting<sp/>=<sp/>(F_CPU<sp/>/<sp/>8<sp/>/<sp/>baud<sp/>-<sp/>1)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assign<sp/>the<sp/>baud_setting,<sp/>a.k.a.<sp/>ubbr<sp/>(USART<sp/>Baud<sp/>Rate<sp/>Register)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>*_ubrrh<sp/>=<sp/>baud_setting<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>*_ubrrl<sp/>=<sp/>baud_setting;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(*_ucsrb,<sp/>_rxen);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(*_ucsrb,<sp/>_txen);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ac4a5536d9bf092116f88b94797ddc882" kindref="member">sbi</ref>(*_ucsrb,<sp/>_rxcie);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1a0f86c41f580e04bdf30ea00e9014eacd" kindref="member">HardwareSerial::end</ref>()</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ae70baf5399951da1e7ad45a0ed890832" kindref="member">cbi</ref>(*_ucsrb,<sp/>_rxen);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ae70baf5399951da1e7ad45a0ed890832" kindref="member">cbi</ref>(*_ucsrb,<sp/>_txen);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="com_2carte_2build_2core_2wiring__private_8h_1ae70baf5399951da1e7ad45a0ed890832" kindref="member">cbi</ref>(*_ucsrb,<sp/>_rxcie);<sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1a60e2bb4a3f40cfaf94601cd4e3333f43" kindref="member">HardwareSerial::available</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(RX_BUFFER_SIZE<sp/>+<sp/>_rx_buffer-&gt;head<sp/>-<sp/>_rx_buffer-&gt;tail)<sp/>%<sp/>RX_BUFFER_SIZE;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1a69b3cfa7d35cc8102fe14e302034f194" kindref="member">HardwareSerial::peek</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rx_buffer-&gt;head<sp/>==<sp/>_rx_buffer-&gt;tail)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_rx_buffer-&gt;buffer[_rx_buffer-&gt;tail];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1a760f254188b4687f5a8a74f4ddd3c83d" kindref="member">HardwareSerial::read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>head<sp/>isn&apos;t<sp/>ahead<sp/>of<sp/>the<sp/>tail,<sp/>we<sp/>don&apos;t<sp/>have<sp/>any<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rx_buffer-&gt;head<sp/>==<sp/>_rx_buffer-&gt;tail)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>_rx_buffer-&gt;buffer[_rx_buffer-&gt;tail];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>_rx_buffer-&gt;tail<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)(_rx_buffer-&gt;tail<sp/>+<sp/>1)<sp/>%<sp/>RX_BUFFER_SIZE;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1a33a5d5c5ffa184e2c303a21152fa2abe" kindref="member">HardwareSerial::flush</ref>()</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>reverse<sp/>this<sp/>or<sp/>there<sp/>may<sp/>be<sp/>problems<sp/>if<sp/>the<sp/>RX<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>occurs<sp/>after<sp/>reading<sp/>the<sp/>value<sp/>of<sp/>rx_buffer_head<sp/>but<sp/>before<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>to<sp/>rx_buffer_tail;<sp/>the<sp/>previous<sp/>value<sp/>of<sp/>rx_buffer_head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>written<sp/>to<sp/>rx_buffer_tail,<sp/>making<sp/>it<sp/>appear<sp/>as<sp/>if<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>reverse<sp/>this<sp/>or<sp/>there<sp/>may<sp/>be<sp/>problems<sp/>if<sp/>the<sp/>RX<sp/>interrupt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>occurs<sp/>after<sp/>reading<sp/>the<sp/>value<sp/>of<sp/>rx_buffer_head<sp/>but<sp/>before<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>to<sp/>rx_buffer_tail;<sp/>the<sp/>previous<sp/>value<sp/>of<sp/>rx_buffer_head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>written<sp/>to<sp/>rx_buffer_tail,<sp/>making<sp/>it<sp/>appear<sp/>as<sp/>if<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>were<sp/>full,<sp/>not<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>_rx_buffer-&gt;head<sp/>=<sp/>_rx_buffer-&gt;tail;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hardware_serial_1aed5cd72cb685534be43eb1e87468ae8c" kindref="member">HardwareSerial::write</ref>(uint8_t<sp/>c)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!((*_ucsra)<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>_udre)))</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>*_udr<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Preinstantiate<sp/>Objects<sp/>//////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRRH)<sp/>&amp;&amp;<sp/>defined(UBRRL)</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="class_hardware_serial" kindref="compound">HardwareSerial</ref><sp/>Serial(&amp;rx_buffer,<sp/>&amp;UBRRH,<sp/>&amp;UBRRL,<sp/>&amp;UCSRA,<sp/>&amp;UCSRB,<sp/>&amp;UDR,<sp/>RXEN,<sp/>TXEN,<sp/>RXCIE,<sp/>UDRE,<sp/>U2X);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(UBRR0H)<sp/>&amp;&amp;<sp/>defined(UBRR0L)</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="class_hardware_serial" kindref="compound">HardwareSerial</ref><sp/>Serial(&amp;rx_buffer,<sp/>&amp;UBRR0H,<sp/>&amp;UBRR0L,<sp/>&amp;UCSR0A,<sp/>&amp;UCSR0B,<sp/>&amp;UDR0,<sp/>RXEN0,<sp/>TXEN0,<sp/>RXCIE0,<sp/>UDRE0,<sp/>U2X0);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USBCON)</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#warning<sp/>no<sp/>serial<sp/>port<sp/>defined<sp/><sp/>(port<sp/>0)</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>no<sp/>serial<sp/>port<sp/>defined<sp/><sp/>(port<sp/>0)</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRR1H)</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="class_hardware_serial" kindref="compound">HardwareSerial</ref><sp/>Serial1(&amp;rx_buffer1,<sp/>&amp;UBRR1H,<sp/>&amp;UBRR1L,<sp/>&amp;UCSR1A,<sp/>&amp;UCSR1B,<sp/>&amp;UDR1,<sp/>RXEN1,<sp/>TXEN1,<sp/>RXCIE1,<sp/>UDRE1,<sp/>U2X1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRR2H)</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="class_hardware_serial" kindref="compound">HardwareSerial</ref><sp/>Serial2(&amp;rx_buffer2,<sp/>&amp;UBRR2H,<sp/>&amp;UBRR2L,<sp/>&amp;UCSR2A,<sp/>&amp;UCSR2B,<sp/>&amp;UDR2,<sp/>RXEN2,<sp/>TXEN2,<sp/>RXCIE2,<sp/>UDRE2,<sp/>U2X2);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(UBRR3H)</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="class_hardware_serial" kindref="compound">HardwareSerial</ref><sp/>Serial3(&amp;rx_buffer3,<sp/>&amp;UBRR3H,<sp/>&amp;UBRR3L,<sp/>&amp;UCSR3A,<sp/>&amp;UCSR3B,<sp/>&amp;UDR3,<sp/>RXEN3,<sp/>TXEN3,<sp/>RXCIE3,<sp/>UDRE3,<sp/>U2X3);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>whole<sp/>file</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/thomas/Programmation/utcoupe/2011/utcoupe-mega/motorControl/build/core/HardwareSerial.cpp"/>
  </compounddef>
</doxygen>
