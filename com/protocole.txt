-------------------------------------------------------------------------
|																		|
|								PROTOCOLE								|
|																		|
-------------------------------------------------------------------------




SERVER PYTHON
	- message envoyé
		Le premier caractère est la commande ensuite suivent les éventuels
		paramètres séparés par des espaces
		ex :
			I
			G 1500 1000
			P

	- message reçu
		Le programme s'attend à recevoir un message contenant la commande
		qui a ammennée à cette réponse et la réponse elle meme, séparés par
		une virgule.
		Si la réponse doit contenir des retour à la ligne,
		il faudra utiliser la caractère '$' et non la caractère de retour à
		la ligne classique.
		ex :
			I,asserv
			I,camb
			P,Pong

	- formatage spécial
		- réponse camera
			La réponse de la caméra, en plus de devoir répondre au formatage
			classique, à savoir renvoyer la commande et la réponse séparés
			par une virgule, doit formater sa réponse de la manière suivante :
			- rien trouvé : 'r'
			- un objet trouvé : 't x y' où t est lun caractère représentant
			le type de l'objet, x et y les coordonnées relatives de cette
			objet. (A noter que x est la distance éstimée entre la caméra
			et l'objet, et y le décalage horizontal en prenant l'axe des
			ordonnées pour former un repère orthonormé.
			- deux objets : 't x y;t x y' la séparation se fait avec un ';'
			- trois objets : 't x y;t x y; t x y'
			- etc...

CARTE ASSERV, COMMANDES
	I (identification) 		--> 'asserv'
	P (Ping)				--> 'Pong'
	G x y (Goal en Absolu)	--> 
	g x y (Goal en relatif)	-->
	A v (Angle en Absolu)	-->
	a v (Angle en relatif)	-->
	x (recalage)			-->


CARTE AUTRE, COMMANDES
	I (identification) 		--> 'autre'
	P (Ping)				--> 'Pong'
	L (allumer led)			--> 'Led On'
	l (éteindre led)		--> 'Led Off'
	S n (retour sharp n)	--> 'valeur du sharp n'

CAMERA, COMMANDES
							--> ' ,r' ou ' ,t x y;t x y'

SERVER PYTHON
	id_carte commande 		(envoyer à la carte <id_carte> la <commande> ex: asserv G 1500 1000)
	loop time -> commande 	(lancer en boucle avec un interval <time> la <commande> suivante)
	test commande 			(lancer 300 fois de suite la <commande>, puis afficher le temps moyen)
	stop n 					(ferme le nième écran)
	exit 					(quitter l'application)
