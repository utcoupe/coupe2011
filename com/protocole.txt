-------------------------------------------------------------------------
|																		|
|								PROTOCOLE								|
|																		|
-------------------------------------------------------------------------




SERVER PYTHON
	- message envoyé
		Le message est composé de l'id du client qui a envoyé le message, d'une commande et de ses éventuels
		paramètres, séparés par le caractère ".".
		id_mandataire:id_cmd:arg1:arg2
		ex :
			1:0
			2:1
			1:2:500:678



COMMANDES : CARTE ASSERV
	0 (identification) 		--> 'asserv'
	1 (Ping)				--> 'Pong'
	2 x y (Goal en Absolu)	--> 'x y 0'	--> 'x y:1' ou 'x y -6'
	3 x y (Goal en relatif)	-->	'x y 0'	--> 'x y:1' ou 'x y -6'
	4 a (Angle en Absolu)	--> 'a 0'	--> 'a 1' ou 'a -6'
	5 a (Angle en relatif)	--> 'a 0'	--> 'a 1' ou 'a -6'
	6 (position)			--> 'x y a'
	7 c (auto recalage)		--> '0'		--> '1' ou '-6' ; c = 1 (bleu) ou 0 (rouge)
	8 (manual recalage)
	9 (delay)
	10 (pwm)
	11 (modif goal abs)
	12 (modif goal rel)
	13 (stop)
	14 (pause)
	15 (resume)
	99 (debug)

COMMANDES : CARTE PINCE
	0 (identification) 		--> 'pince'
	1 (Ping)				--> 'Pong'
	31 n ("SHARP" retourne la valeur du sharp n (de 0 à 11)	
							--> 'N' (valeur du sharp n valeur / -1 ==> erreur mauvais numero de sharp)
	33 n ("MS" retourne la valeur du MS avant (0) ou arriere(1) )	
	 						--> '1' (MS fermé) ou '0' (MS ouvert) ou '2' (erreur)
	34 n s ("TMS" renvoie message quand le microswitch n à atteint la valeur s ('1' MS fermé ou '0' MS ouvert))	
							--> '1' (recu) ou '0' (erreur) 	--> '2' (seuil atteint + arret seuil) ou '0' (annulation)
	35 n p ("PINCE" pince n (0 : AV / 1 : AR) etat p (fermé : 0 / sérré : 1 / ouvert : 2))
							--> '1' (recu) '0' (erreur)
	36 n p ("POSITION" moteur numero n (0 : AV / 1 : AR) va a la position p (0 a 10000)
	 						--> '1' (recu) '0' (erreur)		--> '2'(atteint)
	37 n ("LOAD" renvoie la charge de la pince n (0 : AV / 1 : AR)
	 						--> '2' (sert) '1' (sert pas) '0' (erreur)
	38 ("JACK" renvoie un mesage quand le jack est retiré)
							--> '1' (recu) 					--> '2' (jack retiré)
	39 n ("LED" affiche la couleur sur les diodes rouge ('0') ou bleu ('1'))
							--> '1' (recu) '0' (erreur)
	40 n ("PION" renvoie le type de pion devant la face n (0 : AV / 1 : AR))
							--> '0' (pas de pion)
								'1' (1 pion)
								'2' (2 pion)
								'3' (3 pion ou tete)
								'4' (1 pion + tete)
								'5' (2 pion + tete)
								'6' (erreur)
	/*debug*/
	41 n p t ("MOTOR" set le moteur n à la valeur PWM p(-255 a 255) et  pour t (temps en ms) commande bloquante)
							--> '1' (recu) 					--> '2' (fini) '0' (erreur)



COMMANDES : CAMERA
	0 (identification) 		--> 'autre'
	1 (Ping)				--> 'Pong'
	2 (scan)				--> ' ,r' ou ' ,t x y;t x y'


SERVER PYTHON
	id_carte commande 		(envoyer à la carte <id_carte> la <commande> ex: asserv G 1500 1000)
	loop time -> commande 	(lancer en boucle avec un interval <time> la <commande> suivante)
	test commande 			(lancer 300 fois de suite la <commande>, puis afficher le temps moyen)
	stop n 					(ferme le nième écran)
	exit 					(quitter l'application)


CODES ERREURS
	-1	INVALID_CMD
	-2	INVALID_PARAMETERS_NUMBERS
	-3	INVALID_PARAMETERS_TYPE
	-4	INVALID_ANALOGPIN
	-5	INVALID_DIGITALPIN
	-6	ANNULATION (asserv)
	-7	FIFO_FULL (asserv)
	<<	UNKNOWN_ERROR

ID CARTES
	0	asserv
	1	autres


